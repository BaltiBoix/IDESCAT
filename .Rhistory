dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
dbDisconnect(db)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
source('~/RProjects/IDESCAT/readdades.R', echo=TRUE)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
View(gdf)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id=id7, grupo_id=id3, tabla_id=id5, c=value)
fdf1<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'calt'), id=id7, grupo_id=id3, tabla_id=id5, calt=value)
fdf<-left_join(fdf,fdf1)
remove(fdf1)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Factores';")
dbSendQuery(conn = db,
"CREATE TABLE `Factores` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`TABLA_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Factores', fdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbdf<-dbGetQuery(conn = db,
"select Grupos.C as Grupo, Tablas.C as Tabla, Factores.C as Factor
from Factores join Tablas join Grupos
on Factores.GRUPO_ID=Grupos.ID and Factores.TABLA_ID=Tablas.ID
order by Grupos.C, Tablas.C, Factores.C;"
)
View(dbdf)
dbdf$Grupo <- iconv(dbdf$Grupo, "UTF-8", "UTF-8")
dbdf$Tabla <- iconv(dbdf$Tabla, "UTF-8", "UTF-8")
dbdf$Factor <- iconv(dbdf$Factor, "UTF-8", "UTF-8")
dbDisconnect(db)
require(RSQLite)
require(jsonlite)
require(dplyr)
require(tidyr)
url<-'http://api.idescat.cat/emex/v1/dades.json?i=f171&lang=es'
raw.data <- readLines(url, warn = "F", encoding = "UTF-8")
rd <- fromJSON(raw.data, simplifyVector = FALSE, flatten = TRUE)
remove(raw.data)
rdl<-as.data.frame(rd, stringsAsFactors = FALSE)
rdl<-gather(rdl, 'key', 'value', convert = TRUE)
rdlist<-strsplit(rdl[,1],'[.]')
View(rdl)
df<-data.frame(id1=character(), id2=character(), id3=character(), id4=character(),
id5=character(), id6=character(), id7=character(), id8=character(),
id9=character(), value=character(), stringsAsFactors = FALSE)
for(i in 1:length(rdlist)){
df[i,10]<-rdl[i,2]
for(j in 1:9){
df[i,j]<-rdlist[[i]][j]
if(is.na(df[i,j])){
if(!is.na(as.integer(df[i,j-1]))){
df[i,9]<-as.integer(df[i,j-1])
df[i,j-1]<-NA
}else{
df[i,9]<-0
}
break
}
}
}
View(df)
coldf<- filter(df, id2=='cols', id3=='col')
View(coldf)
coldf<-spread(coldf, id4, value, fill = NA, convert = TRUE, drop = TRUE)
coldf<- filter(df, id2=='cols', id3=='col')
coldf<-spread(coldf, id4, valor, fill = NA, convert = TRUE, drop = TRUE)
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf<-spread(coldf, id4, value, fill = NA, convert = TRUE, drop = TRUE)
seq(1, nrow(coldf), 3)
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
View(coldf)
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf1<-data.frame(id=coldf[seq(2, nrow(coldf), 3), 'value'],
scheme=coldf[seq(3, nrow(coldf), 3), 'value'],
content=coldf[seq(1, nrow(coldf), 3), 'value'],
stringsAsFactors = FALSE)
View(coldf1)
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf<-data.frame(id=coldf[seq(2, nrow(coldf), 3), 'value'],
scheme=coldf[seq(3, nrow(coldf), 3), 'value'],
content=coldf[seq(1, nrow(coldf), 3), 'value'],
stringsAsFactors = FALSE)
select(filter(df, id2=='indicadors', id3=='v'), value)
select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)
strsplit(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value), '[,]')
strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value), '[,]'))
?strsplit
strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]')
as.integer(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]'))
as.integer(unlist(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]')))
valdf<-data.frame(factor_id=rep('factor_id', nrow(coldf)),
valor=as.integer(unlist(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]'))),
stringsAsFactors = FALSE)
View(valdf)
factor_id<-as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value))
valor<-as.integer(unlist(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]')))
valdf<-data.frame(factor_id=rep(factor_id, nrow(coldf)), valor=valor, stringsAsFactors = FALSE)
remove(coldf1)
valdf<-cbind(coldf, valdf)
require(RSQLite)
require(jsonlite)
url<-'http://api.idescat.cat/emex/v1/nodes.json?lang=es'
raw.data <- readLines(url, warn = "F", encoding = "UTF-8")
rd <- fromJSON(raw.data)
remove(raw.data)
rd$fitxes$v$content
rd$fitxes$v$id
rd$fitxes$v$scheme
as.integer(rd$fitxes$v$id)
cadf<-data.frame(id=as.integer(rd$fitxes$v$id), ccaa=rd$fitxes$v$content, stringsAsFactors=FALSE)
View(cadf)
source('~/RProjects/IDESCAT/readnodes.R', echo=TRUE)
require(RSQLite)
require(jsonlite)
require(dplyr)
require(tidyr)
url<-'http://api.idescat.cat/emex/v1/dades.json?id=250019&lang=es'
raw.data <- readLines(url, warn = "F", encoding = "UTF-8")
rd <- fromJSON(raw.data, simplifyVector = FALSE, flatten = TRUE)
remove(raw.data)
rdl<-as.data.frame(rd, stringsAsFactors = FALSE)
rdl<-gather(rdl, 'key', 'value', convert = TRUE)
rdlist<-strsplit(rdl[,1],'[.]')
df<-data.frame(id1=character(), id2=character(), id3=character(), id4=character(),
id5=character(), id6=character(), id7=character(), id8=character(),
id9=character(), value=character(), stringsAsFactors = FALSE)
for(i in 1:length(rdlist)){
df[i,10]<-rdl[i,2]
for(j in 1:9){
df[i,j]<-rdlist[[i]][j]
if(is.na(df[i,j])){
if(!is.na(as.integer(df[i,j-1]))){
df[i,9]<-as.integer(df[i,j-1])
df[i,j-1]<-NA
}else{
df[i,9]<-0
}
break
}
}
}
for(i in unique(as.list(select(filter(df, id3=='col'), id9))[[1]])){
idcol<-as.character(filter(df, id3=='col', id4=='id', id9==i)['value'])
df[rownames(subset(df, id3=='col' & id9==i)), 'id3']<-idcol
}
for(i in 1:nrow(df)){
if(df[i,'id2'] == 'gg'){
if(df[i,'id3'] == 'g' & df[i,'id4'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id3'] == 'g') {
df[i, 'id3']<- idcol
}
}
}
for(i in 1:nrow(df)){
if(is.na(df[i, "id4"])) next
if(df[i,'id4'] == 'tt'){
if(df[i,'id5'] == 't' & df[i,'id6'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id5'] == 't') {
df[i, 'id5']<- idcol
}
}
}
for(i in 1:nrow(df)){
if(is.na(df[i, "id6"])) next
if(df[i,'id6'] == 'ff'){
if(df[i,'id7'] == 'f' & df[i,'id8'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id7'] == 'f') {
df[i, 'id7']<- idcol
}
}
}
glist<-as.list(unique(select(filter(df, grepl('^g[0-9]', id3)), id3)))
gdf<-select(filter(df, grepl('^g[0-9]', id3), id4 == 'c'), id=id3, c=value)
tlist<-as.list(unique(select(filter(df, grepl('^t[0-9]', id5)), id5)))
tdf<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'c'), id=id5, grupo_id=id3, c=value)
tdf1<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'calt'), id=id5, grupo_id=id3, calt=value)
tdf<-left_join(tdf, tdf1)
remove(tdf1)
flist<-as.list(unique(select(filter(df, grepl('^f[0-9]', id7)), id7)))
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id=id7, grupo_id=id3, tabla_id=id5, c=value)
fdf1<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'calt'), id=id7, grupo_id=id3, tabla_id=id5, calt=value)
fdf<-left_join(fdf,fdf1)
remove(fdf1)
View(gdf)
regexpr('g([0-9]%', 'g171')
regexpr('g([0-9]%)', 'g171')
regexpr('g([0-9]+)', 'g171')
gregexpr('g([0-9]+)', 'g171')
grep('g([0-9]+)', 'g171')
grepl('g([0-9]+)', 'g171')
regexec('g([0-9]+)', 'g171')
substr('g171',2)
substr('g171',2, last)
substr('g171',2, 'last')
substring('g171',2)
as.integer(substring('g171',2))
mutate(gdf, id=as.integer(substring(id,2)))
gdf<-mutate(gdf, id=as.integer(substring(id,2)))
tdf<-mutate(tdf, id=as.integer(substring(id,2)), grupo_id=as.integer(substring(grupo_id,2)))
fdf<-mutate(fdf, id=as.integer(substring(id,2)), grupo_id=as.integer(substring(grupo_id,2)),
tabla_id=as.integer(substring(grupo_id,2)))
View(tdf)
View(fdf)
source('~/RProjects/IDESCAT/readdades.R', echo=TRUE)
source('~/RProjects/IDESCAT/loaddata.R', echo=TRUE)
View(valdf)
as.integer(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value))
as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value))
substring(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value)),2)
as.integer(substring(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value)),2))
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf<-data.frame(id=coldf[seq(2, nrow(coldf), 3), 'value'],
scheme=coldf[seq(3, nrow(coldf), 3), 'value'],
content=coldf[seq(1, nrow(coldf), 3), 'value'],
stringsAsFactors = FALSE)
factor_id<-as.integer(substring(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value)),2))
valor<-as.integer(unlist(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]')))
valdf<-data.frame(factor_id=rep(factor_id, nrow(coldf)), valor=valor, stringsAsFactors = FALSE)
valdf<-cbind(coldf, valdf)
coldf[seq(2, nrow(coldf), 3), 'value']
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf[seq(2, nrow(coldf), 3), 'value']
as.integer(coldf[seq(2, nrow(coldf), 3), 'value'])
filter(valdf, is.na(id))
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf<-data.frame(id=as.integer(coldf[seq(2, nrow(coldf), 3), 'value']),
scheme=coldf[seq(3, nrow(coldf), 3), 'value'],
content=coldf[seq(1, nrow(coldf), 3), 'value'],
stringsAsFactors = FALSE)
factor_id<-as.integer(substring(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value)),2))
valor<-as.integer(unlist(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]')))
valdf<-data.frame(factor_id=rep(factor_id, nrow(coldf)), valor=valor, stringsAsFactors = FALSE)
valdf<-cbind(coldf, valdf)
filter(valdf, is.na(id))
filter(valdf, !is.na(id))
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf<-data.frame(id=as.integer(coldf[seq(2, nrow(coldf), 3), 'value']),
scheme=coldf[seq(3, nrow(coldf), 3), 'value'],
content=coldf[seq(1, nrow(coldf), 3), 'value'],
stringsAsFactors = FALSE)
factor_id<-as.integer(substring(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value)),2))
valor<-as.integer(unlist(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]')))
valdf<-data.frame(factor_id=rep(factor_id, nrow(coldf)), valor=valor, stringsAsFactors = FALSE)
valdf<-cbind(coldf, valdf)
valdf<-filter(valdf, !is.na(id))
coldf<- select(filter(df, id2=='cols', id3=='col'), id4, value)
coldf<-data.frame(municipio_id=as.integer(coldf[seq(2, nrow(coldf), 3), 'value']),
scheme=coldf[seq(3, nrow(coldf), 3), 'value'],
content=coldf[seq(1, nrow(coldf), 3), 'value'],
stringsAsFactors = FALSE)
factor_id<-as.integer(substring(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='id'), value)),2))
valor<-as.integer(unlist(strsplit(as.character(select(filter(df, id2=='indicadors', id3=='i', id4=='v'), value)), '[,]')))
valdf<-data.frame(factor_id=rep(factor_id, nrow(coldf)), valor=valor, stringsAsFactors = FALSE)
valdf<-cbind(coldf, valdf)
valdf<-filter(valdf, !is.na(id))
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXIST `DatosMunicipios` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, 'Grupos', select(filter(valdf, scheme=='mun'), municipio_id, factor_id, valor), append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXIST `DatosMunicipios` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, `DatosMunicipios`, select(filter(valdf, scheme=='mun'), municipio_id, factor_id, valor), append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXISTS `DatosMunicipios` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, `DatosMunicipios`, select(filter(valdf, scheme=='mun'), municipio_id, factor_id, valor), append = TRUE)
dbDisconnect(db)
select(filter(valdf, scheme=='mun'), municipio_id, factor_id, valor)
mundf<-select(filter(valdf, scheme=='mun'), municipio_id, factor_id, valor)
View(mundf)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXISTS `DatosMunicipios` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, `DatosMunicipios`, mundf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'DatosMunicipios';")
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXISTS `DatosMunicipios` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, `DatosMunicipios`, mundf, append = TRUE)
dbDisconnect(db)
valdf<-filter(valdf, !is.na(id))
valdf<-filter(valdf, !is.na(municipio_id))
mundf<-select(filter(valdf, scheme=='mun'), municipio_id, factor_id, valor)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
#dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'DatosMunicipios';")
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXISTS `DatosMunicipios` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, `DatosMunicipios`, mundf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
#dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'DatosMunicipios';")
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXISTS `DatosMun` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, 'DatosMun', mundf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
#dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'DatosMunicipios';")
dbSendQuery(conn = db,
"CREATE TABLE IF NOT EXISTS `DatosMunicipios` (
`MUNICIPIO_ID` INTEGER NOT NULL,
`FACTOR_ID` INTEGER NOT NULL,
`VALOR` NUMERIC,
PRIMARY KEY(MUNICIPIO_ID, FACTOR_ID)
);")
dbWriteTable(db, 'DatosMunicipios', mundf, append = TRUE)
dbDisconnect(db)
