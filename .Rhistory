}
}
for(i in unique(as.list(select(filter(df, id3=='col'), id9))[[1]])){
idcol<-as.character(filter(df, id3=='col', id4=='id', id9==i)['value'])
df[rownames(subset(df, id3=='col' & id9==i)), 'id3']<-idcol
}
df[10,3:4] == c('g','id')
if(df[10,3:4] == c('g','id')) print(TRUE)
if(df[10,3] == 'g' & df[10,3] == id')) print(TRUE)
if(df[10,3] == 'g' & df[10,3] == id') print(TRUE)
)
if(df[10,3] == 'g' & df[10,3] == id') {print(TRUE)}
()
))
(df[10,3] == 'g' & df[10,3] == id')
if(df[10,3] == 'g' & df[10,3] == 'id') {print(TRUE)}
if(df[10,3] == 'g' & df[10,4] == 'id') {print(TRUE)}
for(i in 1:nrow(df)){
if(df[i,'id3'] == 'g' & df[i,'id4'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id3'] == 'g') {
df[i, 'id3']<- idcol
}
}
df[i,'id3'] == 'g' & df[i,'id4'] == 'id'
i
df<-data.frame(id1=character(), id2=character(), id3=character(), id4=character(),
id5=character(), id6=character(), id7=character(), id8=character(),
id9=character(), value=character(), stringsAsFactors = FALSE)
for(i in 1:length(rdlist)){
df[i,10]<-rdl[i,2]
for(j in 1:9){
df[i,j]<-rdlist[[i]][j]
if(is.na(df[i,j])){
if(!is.na(as.integer(df[i,j-1]))){
df[i,9]<-as.integer(df[i,j-1])
df[i,j-1]<-NA
}else{
df[i,9]<-0
}
break
}
}
}
for(i in unique(as.list(select(filter(df, id3=='col'), id9))[[1]])){
idcol<-as.character(filter(df, id3=='col', id4=='id', id9==i)['value'])
df[rownames(subset(df, id3=='col' & id9==i)), 'id3']<-idcol
}
for(i in 1:nrow(df)){
if(df[i,'id2'] == 'gg'){
if(df[i,'id3'] == 'g' & df[i,'id4'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id3'] == 'g') {
df[i, 'id3']<- idcol
}
}
}
for(i in 1:nrow(df)){
if(df[i,'id4'] == 'tt'){
if(df[i,'id5'] == 't' & df[i,'id6'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id5'] == 't') {
df[i, 'id5']<- idcol
}
}
}
i
df[i, "id4"]
!is.na(df[i, "id4"])
is.na(df[i, "id4"])
?continue
df<-data.frame(id1=character(), id2=character(), id3=character(), id4=character(),
id5=character(), id6=character(), id7=character(), id8=character(),
id9=character(), value=character(), stringsAsFactors = FALSE)
for(i in 1:length(rdlist)){
df[i,10]<-rdl[i,2]
for(j in 1:9){
df[i,j]<-rdlist[[i]][j]
if(is.na(df[i,j])){
if(!is.na(as.integer(df[i,j-1]))){
df[i,9]<-as.integer(df[i,j-1])
df[i,j-1]<-NA
}else{
df[i,9]<-0
}
break
}
}
}
for(i in unique(as.list(select(filter(df, id3=='col'), id9))[[1]])){
idcol<-as.character(filter(df, id3=='col', id4=='id', id9==i)['value'])
df[rownames(subset(df, id3=='col' & id9==i)), 'id3']<-idcol
}
for(i in 1:nrow(df)){
if(df[i,'id2'] == 'gg'){
if(df[i,'id3'] == 'g' & df[i,'id4'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id3'] == 'g') {
df[i, 'id3']<- idcol
}
}
}
for(i in 1:nrow(df)){
if(is.na(df[i, "id4"])) next
if(df[i,'id4'] == 'tt'){
if(df[i,'id5'] == 't' & df[i,'id6'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id5'] == 't') {
df[i, 'id5']<- idcol
}
}
}
for(i in 1:nrow(df)){
if(is.na(df[i, "id6"])) next
if(df[i,'id6'] == 'ff'){
if(df[i,'id7'] == 'f' & df[i,'id8'] == 'id') {
idcol<-df[i, 'value']
}
if(df[i,'id7'] == 'f') {
df[i, 'id7']<- idcol
}
}
}
select(filter(df, id7=='f271'), id8, value)
select(filter(df, id3=='g173', id4 != 'tt'), id4, value)
glist<-unique(df[,'id3'])
glist
glist<-unique(filter(df[,'id3'], grepl('g', id3)))
glist<-unique(filter(df[,'id3'], grepl('g', df$id3)))
?%in%
filter(df[,'id3'], grepl('g', id3))
filter(df[,'id3'], id3 == 'g173')
filter(df[, 3], id3 == 'g173')
filter(df, id3 == 'g173')
filter(df, grepl('g', id3))
filter(df, grepl('^g', id3))
select(filter(df, grepl('^g', id3)), id3)
select(filter(df, grepl('^g[0-9]', id3)), id3)
unique(select(filter(df, grepl('^g[0-9]', id3)), id3))
glist<-as.list(unique(select(filter(df, grepl('^g[0-9]', id3)), id3)))
glist
select(filter(df, grepl('^g[0-9]', id3), id4 == 'c'), id3, value))
select(filter(df, grepl('^g[0-9]', id3), id4 == 'c'), id3, value)
gdf<-select(filter(df, grepl('^g[0-9]', id3), id4 == 'c'), id3, value)
select(filter(df, grepl('^t[0-9]', id5), id6 == 'c'), id5, value)
tdf<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'c'), id5, value)
tlist<-unique(select(filter(df, grepl('^t[0-9]', id5)), id5))
tlist
tlist<-as.list(unique(select(filter(df, grepl('^t[0-9]', id5)), id5)))
tlist
flist<-as.list(unique(select(filter(df, grepl('^f[0-9]', id7)), id7)))
flist
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id8, value)
fdf
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id7, value)
fdf
filter[df, id7='f370']
filter[df, id7=='f370']
filter(df, id7=='f370')
select(filter(df, id7=='f370'), id8, value)
select(filter(df, grepl('^f[0-9]', id3), id4 != 'tt'), id4, value)
select(filter(df, grepl('^g[0-9]', id3), id4 != 'tt'), id4, value)
select(filter(df, grepl('^g[0-9]', id3), id4 != 'tt'), id3, id4, value)
gdf
tdf
select(filter(df, grepl('^t[0-9]', id5), id6 != 'ff'), id5, id6, value)
select(filter(df, grepl('^t[0-9]', id5), id6 == 'l'), id5, id6, value)
View(fdf)
require(RSQLite)
require(jsonlite)
require(dplyr)
require(tidyr)
url<-'http://api.idescat.cat/indicadors/v1/nodes.json?lang=es'
raw.data <- readLines(url, warn = "F", encoding = "UTF-8")
rd <- fromJSON(raw.data, simplifyVector = FALSE, flatten = TRUE)
remove(raw.data)
rdl<-as.data.frame(rd)
rdl<-gather(rdl, 'key')
rdlist<-strsplit(rdl[,1],'[.]')
df<-data.frame(id1=character(), id2=character(), id3=character(), id4=character(),
id5=character(), id6=character(), id7=character(), id8=character(),
id9=character(), value=character(), stringsAsFactors = FALSE)
for(i in 1:length(rdlist)){
df[i,10]<-rdl[i,2]
for(j in 1:9){
df[i,j]<-rdlist[[i]][j]
if(is.na(df[i,j])){
if(!is.na(as.integer(df[i,j-1]))){
df[i,9]<-as.integer(df[i,j-1])
df[i,j-1]<-NA
}else{
df[i,9]<-0
}
break
}
}
}
rdlist<-strsplit(rdl[,1],'[.]')
strsplit(rdl[1,1],'[.]')
rdl[1,1]
rdl<-as.data.frame(rd, stringsAsFactors = FALSE)
rdl<-gather(rdl, 'key', 'value')
help(options)
options(stringsAsFactors=FALSE)
rdl<-as.data.frame(rd, stringsAsFactors = FALSE)
rdl<-gather(rdl, 'key', 'value')
rdl<-as.data.frame(rd, stringsAsFactors = FALSE)
rdl<-gather(rdl, 'key', 'value', convert = TRUE)
rdl[1,1]
rdlist<-strsplit(rdl[,1],'[.]')
rdlist
df<-data.frame(id1=character(), id2=character(), id3=character(), id4=character(),
id5=character(), id6=character(), id7=character(), id8=character(),
id9=character(), value=character(), stringsAsFactors = FALSE)
for(i in 1:length(rdlist)){
df[i,10]<-rdl[i,2]
for(j in 1:9){
df[i,j]<-rdlist[[i]][j]
if(is.na(df[i,j])){
if(!is.na(as.integer(df[i,j-1]))){
df[i,9]<-as.integer(df[i,j-1])
df[i,j-1]<-NA
}else{
df[i,9]<-0
}
break
}
}
}
View(df)
source('~/RProjects/IDESCAT/readdades.R', echo=TRUE)
View(fdf)
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id3, id5, id7, value)
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id3, id5, id7, c=value)
fdf1<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'calt'), calt=value)
fdf<-cbind(fdf,fdf1)
View(tdf)
tdf<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'c'), id3, id5, c=value)
tdf1<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'calt'), calt=value)
tdf<-cbind(tdf, tdf1)
View(tdf1)
tdf1<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'calt'), id3, id5, calt=value)
?join
tdf<-left_join(tdf,tdf1)
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id3, id5, id7, c=value)
fdf1<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'calt'), id3, id5, id7, calt=value)
fdf<-left_join(fdf,fdf1)
remove(fdf1)
select(filter(df, grepl('^g[0-9]', id3), id4 == 'calt'), id3, value)
gdf<-select(filter(df, grepl('^g[0-9]', id3), id4 == 'c'), id=id3, c=value)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbDisconnect(db)
tdf<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'c'), grupo_id=id3, id=id5, c=value)
tdf1<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'calt'), grupo_id=id3, id=id5, calt=value)
tdf<-left_join(tdf, tdf1)
remove(tdf1)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablass', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
tdf<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'c'), id=id5, grupo_id=id3, c=value)
tdf1<-select(filter(df, grepl('^t[0-9]', id5), id6 == 'calt'), id=id5, grupo_id=id3, calt=value)
tdf<-left_join(tdf, tdf1)
remove(tdf1)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
dbDisconnect(db)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
source('~/RProjects/IDESCAT/readdades.R', echo=TRUE)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT NOT NULL,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
View(gdf)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Tablas';")
dbSendQuery(conn = db,
"CREATE TABLE `Tablas` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Tablas', tdf, append = TRUE)
dbDisconnect(db)
fdf<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'c'), id=id7, grupo_id=id3, tabla_id=id5, c=value)
fdf1<-select(filter(df, grepl('^f[0-9]', id7), id8 == 'calt'), id=id7, grupo_id=id3, tabla_id=id5, calt=value)
fdf<-left_join(fdf,fdf1)
remove(fdf1)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Grupos';")
dbSendQuery(conn = db,
"CREATE TABLE `Grupos` (
`ID` TEXT NOT NULL UNIQUE,
`C`	TEXT NOT NULL UNIQUE,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Grupos', gdf, append = TRUE)
dbSendQuery(conn = db, "DROP TABLE IF EXISTS 'Factores';")
dbSendQuery(conn = db,
"CREATE TABLE `Factores` (
`ID` TEXT NOT NULL UNIQUE,
`GRUPO_ID` TEXT NOT NULL,
`TABLA_ID` TEXT NOT NULL,
`C` TEXT NOT NULL,
`CALT` TEXT,
PRIMARY KEY(ID)
);")
dbWriteTable(db, 'Factores', fdf, append = TRUE)
dbDisconnect(db)
db <- dbConnect(SQLite(), 'IDESCAT.sqlite')
dbdf<-dbGetQuery(conn = db,
"select Grupos.C as Grupo, Tablas.C as Tabla, Factores.C as Factor
from Factores join Tablas join Grupos
on Factores.GRUPO_ID=Grupos.ID and Factores.TABLA_ID=Tablas.ID
order by Grupos.C, Tablas.C, Factores.C;"
)
View(dbdf)
dbdf$Grupo <- iconv(dbdf$Grupo, "UTF-8", "UTF-8")
dbdf$Tabla <- iconv(dbdf$Tabla, "UTF-8", "UTF-8")
dbdf$Factor <- iconv(dbdf$Factor, "UTF-8", "UTF-8")
dbDisconnect(db)
